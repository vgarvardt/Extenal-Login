<?php
// $Id$

/**
 * @file
 * Creates a block with OpenID providers list, Facebook, VKontakte, etc.
 * that improves usability for external authorization.
 *
 */

/**
 * Implementation of hook_init().
 */
function external_login_init() {
  module_load_include('inc', 'external_login', 'inc/external_login.routines');
  module_load_include('inc', 'external_login', 'inc/external_login.providers');
}

/**
 * Implementation of hook_menu().
 */
function external_login_menu() {
  $items = array();

  $items['admin/user/external_login'] = array(
    'title' => 'External Login',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('external_login_settings_providers'),
    'access arguments' => array('administer site configuration'),
    'file' => 'inc/external_login.admin.inc'
  );
  // local tasks
  $weight = 0;
  $items['admin/user/external_login/providers'] = array(
    'title' => 'Providers',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
    'weight' => $weight++,
  );
  $items['admin/user/external_login/themes'] = array(
    'title' => 'Themes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('external_login_settings_themes'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'inc/external_login.admin.inc',
    'weight' => $weight++,
  );
  $items['admin/user/external_login/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('external_login_settings_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'inc/external_login.admin.inc',
    'weight' => $weight++,
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function external_login_theme() {
  return array(
    'external_login_admin_list' => array(
      'arguments' => array('regions' => NULL, 'providers' => NULL, 'form' => NULL),
      'template' => 'inc/external-login-admin-list',
    ),
    'external_login_admin_list_prepare' => array(
      'arguments' => array('form' => NULL),
      'file' => 'inc/external_login.themes.inc'
    ),

    // External Login block form themes
    'external_login_default' => array(
      'arguments' => array('form' => NULL),
      'file' => 'inc/external_login.themes.inc'
    ),
    'external_login_dropdown' => array(
      'arguments' => array('form' => NULL),
      'file' => 'inc/external_login.themes.inc'
    ),
    'external_login_accordion' => array(
      'arguments' => array('form' => NULL),
      'file' => 'inc/external_login.themes.inc'
    ),

    // block form theme helpers
    'external_login_accordion_item' => array(
      'arguments' => array('pname' => NULL, 'title' => NULL),
      'template' => 'inc/external-login-accordion-item',
    ),
  );
}

/**
 * Implementation of hook_block().
 */
function external_login_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      return array(
        array(
          'info' => t('External Login'),
          'cache' => BLOCK_CACHE_GLOBAL,
        )
      );
      break;
    case 'view':
      if (user_is_anonymous()) {
        return array(
          'subject' => t('Log in as user of'),
          'content' => drupal_get_form('external_login_block_form')
        );
      }
      break;
  }
}

function external_login_block_form() {
  drupal_add_css(drupal_get_path('module', 'external_login') . '/files/external_login.css');

  $providers = external_login_get_providers();
  $options = array();
  foreach ($providers as $provider => $data) {
    $options[$provider] = $data['short'];
  }

  $form = array();

  $form['provider'] = array(
    '#type' => 'select',
    '#title' => t('Provider'),
    '#options' => $options,
  );
  $form['input'] = array(
    '#type' => 'textfield',
    '#title' => t('Additions info'),
    '#maxlength' => 255,
    '#size' => 15,
  );
  $form['op'] = array(
    '#type' => 'submit',
    '#value' => t('Log in'),
  );
  $form['info'] = array(
    '#prefix' => '<div class="external-login-info">',
    '#value' => l(t('What is OpenID?'), 'http://openid.net/', array('external' => TRUE)),
    '#suffix' => '</div>',
  );

  $form['#theme'] = variable_get('external_login_theme', 'external_login_dropdown');

  return $form;
}

function external_login_block_form_validate($form, &$form_state) {
  $providers = external_login_get_providers();

  $provider = $form_state['values']['provider'];
  if (isset($providers[$provider]['input'])) {
    if (drupal_strlen(trim($form_state['values']['input'])) == 0) {
      form_set_error('input', t('!name field is required.', array('!name' => $providers[$provider]['input'])));
    }
    $function = $providers[$provider]['path'] . '_validate';
    $err_msg = $function($form_state['values']['input']);
    if ($err_msg) {
      form_set_error('input', $err_msg);
    }
  }
}

function external_login_block_form_submit($form, &$form_state) {
  $providers = external_login_get_providers();
  $provider = $form_state['values']['provider'];
  if (isset($providers[$provider]['input'])) {
    $function = $providers[$provider]['path'];
    $path = $function($form_state['values']['input']);
  }
  else {
    $path = $providers[$provider]['path'];
  }
  $return_to = url('openid/authenticate', array('absolute' => TRUE, 'query' => drupal_get_destination()));
  openid_begin($path, $return_to);
}

/**
 * Implementation of hook_form_alter().
 *
 * - remove default OpenID links from login forms
 * - try to normalize user name from OpenID URL if any
 */
function external_login_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'user_login_block' || $form_id == 'user_login') {
    unset($form['openid_links']);
  }
  elseif ($form_id == 'user_register' && isset($_SESSION['openid']['values'])) {
    // if Username set by OpenID module is URL it means that provider did not return
    // valid nickname, so we should try to normalize it to get valid Drupal Username
    // this was actual till OpenID 6.15
    if (!empty($form['name']['#default_value']) && valid_url($form['name']['#default_value'], TRUE)) {
      $username = external_login_normalize_username($form['name']['#default_value']);
      if ($username) $form['name']['#default_value'] = $username;
    }
    elseif (empty($form['name']['#default_value'])) {
      // starting from OpenID 6.15 identity is not set as default user name when username
      // was not received from OpenID provider
      $username = external_login_normalize_username($form['auth_openid']['#value']);
      if ($username) $form['name']['#default_value'] = $username;
    }

    // if name is still empty, maybe we'll simply fill it with identity value (old school =))
    if (empty($form['name']['#default_value']) && variable_get('external_login_openid_ident2name', FALSE)) {
      $form['name']['#default_value'] = check_plain($form['auth_openid']['#value']);
    }
  }
}
